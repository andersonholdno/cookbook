/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CookBookFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createRecipe"
      | "getRecipe"
      | "getUserRecipes"
      | "grantUserDecrypt"
      | "likeRecipe"
      | "pendingTips"
      | "protocolId"
      | "recipeCount"
      | "recipes"
      | "tipAuthor"
      | "userLiked"
      | "userRecipes"
      | "withdrawTips"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RecipeCreated"
      | "RecipeLiked"
      | "RecipeTipped"
      | "TipsWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createRecipe",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRecipes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantUserDecrypt",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "likeRecipe",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recipeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recipes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tipAuthor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userLiked",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRecipes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTips",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRecipe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRecipe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRecipes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantUserDecrypt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "likeRecipe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recipes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tipAuthor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userLiked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRecipes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTips",
    data: BytesLike
  ): Result;
}

export namespace RecipeCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    author: AddressLike,
    title: string,
    ipfsCID: string,
    tags: string[]
  ];
  export type OutputTuple = [
    id: bigint,
    author: string,
    title: string,
    ipfsCID: string,
    tags: string[]
  ];
  export interface OutputObject {
    id: bigint;
    author: string;
    title: string;
    ipfsCID: string;
    tags: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipeLikedEvent {
  export type InputTuple = [id: BigNumberish, user: AddressLike];
  export type OutputTuple = [id: bigint, user: string];
  export interface OutputObject {
    id: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipeTippedEvent {
  export type InputTuple = [
    id: BigNumberish,
    from: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [id: bigint, from: string, value: bigint];
  export interface OutputObject {
    id: bigint;
    from: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TipsWithdrawnEvent {
  export type InputTuple = [
    id: BigNumberish,
    author: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [id: bigint, author: string, value: bigint];
  export interface OutputObject {
    id: bigint;
    author: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CookBookFHE extends BaseContract {
  connect(runner?: ContractRunner | null): CookBookFHE;
  waitForDeployment(): Promise<this>;

  interface: CookBookFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createRecipe: TypedContractMethod<
    [title: string, ipfsCID: string, tags: string[]],
    [bigint],
    "nonpayable"
  >;

  getRecipe: TypedContractMethod<
    [id: BigNumberish],
    [[bigint, string, string, string, string[], string, string, bigint]],
    "view"
  >;

  getUserRecipes: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  grantUserDecrypt: TypedContractMethod<
    [id: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  likeRecipe: TypedContractMethod<
    [id: BigNumberish, delta: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  pendingTips: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  recipeCount: TypedContractMethod<[], [bigint], "view">;

  recipes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, string, bigint] & {
        id: bigint;
        author: string;
        title: string;
        ipfsCID: string;
        likes: string;
        tips: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  tipAuthor: TypedContractMethod<[id: BigNumberish], [void], "payable">;

  userLiked: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  userRecipes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawTips: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createRecipe"
  ): TypedContractMethod<
    [title: string, ipfsCID: string, tags: string[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRecipe"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[bigint, string, string, string, string[], string, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRecipes"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "grantUserDecrypt"
  ): TypedContractMethod<
    [id: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "likeRecipe"
  ): TypedContractMethod<
    [id: BigNumberish, delta: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pendingTips"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recipeCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recipes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, string, bigint] & {
        id: bigint;
        author: string;
        title: string;
        ipfsCID: string;
        likes: string;
        tips: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tipAuthor"
  ): TypedContractMethod<[id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "userLiked"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "userRecipes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawTips"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "RecipeCreated"
  ): TypedContractEvent<
    RecipeCreatedEvent.InputTuple,
    RecipeCreatedEvent.OutputTuple,
    RecipeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RecipeLiked"
  ): TypedContractEvent<
    RecipeLikedEvent.InputTuple,
    RecipeLikedEvent.OutputTuple,
    RecipeLikedEvent.OutputObject
  >;
  getEvent(
    key: "RecipeTipped"
  ): TypedContractEvent<
    RecipeTippedEvent.InputTuple,
    RecipeTippedEvent.OutputTuple,
    RecipeTippedEvent.OutputObject
  >;
  getEvent(
    key: "TipsWithdrawn"
  ): TypedContractEvent<
    TipsWithdrawnEvent.InputTuple,
    TipsWithdrawnEvent.OutputTuple,
    TipsWithdrawnEvent.OutputObject
  >;

  filters: {
    "RecipeCreated(uint256,address,string,string,string[])": TypedContractEvent<
      RecipeCreatedEvent.InputTuple,
      RecipeCreatedEvent.OutputTuple,
      RecipeCreatedEvent.OutputObject
    >;
    RecipeCreated: TypedContractEvent<
      RecipeCreatedEvent.InputTuple,
      RecipeCreatedEvent.OutputTuple,
      RecipeCreatedEvent.OutputObject
    >;

    "RecipeLiked(uint256,address)": TypedContractEvent<
      RecipeLikedEvent.InputTuple,
      RecipeLikedEvent.OutputTuple,
      RecipeLikedEvent.OutputObject
    >;
    RecipeLiked: TypedContractEvent<
      RecipeLikedEvent.InputTuple,
      RecipeLikedEvent.OutputTuple,
      RecipeLikedEvent.OutputObject
    >;

    "RecipeTipped(uint256,address,uint256)": TypedContractEvent<
      RecipeTippedEvent.InputTuple,
      RecipeTippedEvent.OutputTuple,
      RecipeTippedEvent.OutputObject
    >;
    RecipeTipped: TypedContractEvent<
      RecipeTippedEvent.InputTuple,
      RecipeTippedEvent.OutputTuple,
      RecipeTippedEvent.OutputObject
    >;

    "TipsWithdrawn(uint256,address,uint256)": TypedContractEvent<
      TipsWithdrawnEvent.InputTuple,
      TipsWithdrawnEvent.OutputTuple,
      TipsWithdrawnEvent.OutputObject
    >;
    TipsWithdrawn: TypedContractEvent<
      TipsWithdrawnEvent.InputTuple,
      TipsWithdrawnEvent.OutputTuple,
      TipsWithdrawnEvent.OutputObject
    >;
  };
}
